import os

# On a new deployment (whether production or development) make
# a copy of this file called 'config.py' and change 'False' for
# SECRET_KEY to a newly generated string using these python commands:
# $ import os
# $ os.urandom(24)

basedir = os.path.abspath(os.path.dirname(__file__))


class Config(object):
    SECRET_KEY = False
    SERVER_NAME = 'waarismijnstemlokaal.nl'
    PREFERRED_URL_SCHEME = 'https'
    FORCE_HOST_FOR_REDIRECTS = 'waarismijnstemlokaal.nl'
    USE_SESSION_FOR_NEXT = True

    BABEL_DEFAULT_LOCALE = 'nl'

    SQLALCHEMY_DATABASE_URI = 'mysql+pymysql://root:<DB_PASSWORD>@stm_mysql_1:3306/stembureaus'
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    CKAN_URL = ''
    CKAN_API_KEY = ''
    # List the resource IDs of the elections which are allowed to be
    # edited. 'publish_resource' contains the IDs of resources
    # of upcoming elections where the stemlokalen data will be made
    # public, while the 'draft_resource' contains the IDS of
    # resources where drafts of the stemlokalen data will be saved while
    # the gemeenten input all the information. For 'election_number'
    # fill in a unique number of this election in the format '001',
    # '002', etc. Check the 'election_number' of the previous
    # election and increment it with 1 to get the election number of
    # this election. For 'election_date' fill in the date of the
    # election in 'YYYYMMDD' format, e.g. '20180321'.
    # NOTE: Use the exact same '<name of election>' values in
    # the 'verkiezingen' field in 'app/data/gemeenten.json'
    CKAN_CURRENT_ELECTIONS = {
        '<name of election>': {
            'publish_resource': '<ID_of_resource>',
            'draft_resource': '<ID_of_resource>',
            'election_number': '<unique_number_for_this_election>',
            'election_date': '<date_of_this_election>'
        }
    }

    MAIL_SERVER = ''
    MAIL_PORT = ''
    MAIL_USE_TLS = True
    MAIL_USERNAME = ''
    MAIL_PASSWORD = ''
    FROM = ''
    ADMINS = ['']

    POSTS_PER_PAGE = 20
